class Test {

    benchmark() {
        def zero = 0;       // Represents the integer value zero.
        def zero_fp = 0.0;  // Represents the floating-point value zero.
        def one = 1;        // Represents the integer value one.
        def one_fp = 1.0;   // Represents the floating-point value one.
        def two = 2;        // Represents the integer value two.
        def two_fp = 2.0;   // Represents the floating-point value two.
        def three = 3;      // Represents the integer value three.
        def three_fp = 3.0; // Represents the floating-point value three.
        def five = 5;       // Represents the integer value five.
        def five_fp = 5.0;  // Represents the floating-point value five.

        def _1 = one / zero;                                        // Division by zero for integers, likely results in an exception.
        def _2 = one / one;                                         // Division of one by one, resulting in one.
        def _3 = one / ((two * three) / (three * five));            // Division of 1 by the result of (6 / 15), which simplifies to (1 / 0) for integer divisions.
        def _4 = one / ((two * three) / five);                      // Division of 1 by the result of (6 / 5), which is (1 / 1) for integer divisions.
        def _5 = one / ((two_fp * three_fp) - (five_fp + one_fp));  // Division of 1 by the result of (6.0 - 6.0), which is division by 0.0 for floating-point numbers.
        def _6 = one / (one_fp / two_fp);                           // Division of 1 by the result of (1.0 / 2.0), which is (1 / 0.5).
        def _7 = one / (one_fp / two);                              // Division of 1 by the result of (1.0 / 2), which is (1 / 0.5).

        // This is the result of (39.7 / 0.0).
        def _8 =
            ((7.5 * (2 + 3) - (4.0 / 2)) + (6 * 1.2 - 3)) /
            (((8 / 2.0) + (3.5 - 1.5)) - (5 + (1.0 * 1)));

        // This is the result of (8.0 / 0.0).
        def _9 =
        ((((2.5 + 1.5) * (4 - 2)) + ((3 * 2) - (9.0 / 3))) - ((1.2 * 5) - (6 / 2))) /
        (((((10 / 2.0 - 2.0) + (3.0 + 1.0)) - 5) * 1) - ((2.5 * 2 - 1.0) + 1.0) + 3);
    }
}
class parity {
	
	some_integer_numeric_function(unknown) {
		def some = 10;
		if (unknown == 123) {
			some = some + 2;                     
		}
		return some;                                                     // some         = [10, 12]
	}
	
	some_decimal_numeric_function(unknown) {
		def some = 10.5;
		if (unknown == 456) {
			some = some + 2.3;                     
		}
		return some;                                                     // some         = [10.5, 12.8]
	}
	
	testDivBy0(unknown) {
	
		// FIRST PASS
		// sliding integer interval
		
		def i_certain           = 10;                                          // i_certain      = [10, 10]
		def i_uncertain         = this.some_integer_numeric_function(unknown); // i_uncertain    = [10, 12]

		def i_sure_div_by0_1    = 100 / (1 - (7 / (9 - 2)));
		def i_NO_div_by0_2      = 100 / (1 + 1);

		def i_NO_div_by0_3      = 100 / i_certain;
		def i_NO_div_by0_4      = 100 / i_uncertain;

		def i_sure_div_by0_5    = 100 / (i_certain - 10);
		def i_maybe_div_by0_6   = 100 / (i_uncertain - 10);
		
		def i_NO_div_by0_7      = 100 / (i_certain - 11);
		def i_maybe_div_by0_8   = 100 / (i_uncertain - 11);

		def i_NO_div_by0_9      = 100 / (i_certain - 12);
		def i_maybe_div_by0_10  = 100 / (i_uncertain - 12);
		
		def i_NO_div_by0_11     = 100 / (i_certain - 13);
		def i_NO_div_by0_12     = 100 / (i_uncertain - 13);

		// SEONC PASS
		// sliding float interval
		
		def f_certain           = 10.5;                                        // f_certain      = [10.5, 10.5]
		def f_uncertain         = this.some_decimal_numeric_function(unknown); // f_uncertain    = [10.5, 12.8]

		def f_sure_div_by0_1    = 100.1 / (1.2 - (8.52 / (9.2 - 2.1)));
		def f_NO_div_by0_2      = 100.1 / (1.2 + 1.3);

		def f_NO_div_by0_3      = 100.1 / f_certain;
		def f_NO_div_by0_4      = 100.1 / f_uncertain;

		def f_sure_div_by0_5    = 100.1 / (f_certain - 10.5);
		def f_maybe_div_by0_6   = 100.1 / (f_uncertain - 10.5);
		
		def f_NO_div_by0_7      = 100.1 / (f_certain - 11.5);
		def f_maybe_div_by0_8   = 100.1 / (f_uncertain - 11.5);

		def f_NO_div_by0_9      = 100.1 / (f_certain - 12.5);
		def f_maybe_div_by0_10  = 100.1 / (f_uncertain - 12.5);
		
		def f_NO_div_by0_11     = 100.1 / (f_certain - 13.5);
		def f_NO_div_by0_12     = 100.1 / (f_uncertain - 13.5);

	}
    
}��// 908093 - IMP file for Division By Zero Checker
class div_zero {

    notNumerical() {
    def a = 8;
    def b = "hello";
    def c = a / b;      // NaN: b is not a numeric type
    }

	alwaysSafe() {
		def a = 10;
		def b = 2;
		def c = a / b;  // safe: divisor is not zero
	}

	definitelyUnsafe() {
		def a = 5;
		def b = 0;
		def c = a / b;  // unsafe: divisor is definitely zero
	}

	simpleUnsafe() {
    	def a = 5;
    	def b = 5 - a;
    	def c = a / b;  // unsafe: divisor is definitely zero
    }

	conditionalSafe(cond) {
		def a = 10;
		def b = 1;

		if (cond) {
			b = 2;
		}

		def c = a / b;  // safe: b in [1,2] range, never zero
	}

	maybeUnsafe(cond) {
		def a = 8;
		def b = 1;

		if (cond) {
			b = 0;
		}

		def c = a / b;  // uncertain: b could be zero so potential div by zero
	}

	loopDependent(cond) {
		def a = 100;
		def b = 3;

		while (cond) {
			b = b - 1;
		}

		def c = a / b;  // b may reach zero so potential div by zero
	}

	paramTest(x) {
		def a = 12;
		def b = x;

		def c = a / b;  // depends on input value of x
	}

	complexFlow(flag) {
		def a = 50;
		def b = 5;

		if (flag) {
			b = b - 3;
			b = b - 2;
		}

		def c = a / b;  // b = 5 or 0 so potential div by zero
	}

	arrayTest(i) {
		def arr = new int[3];
		arr[0] = 1;
		arr[1] = 2;
		arr[2] = 0;

		def a = 30;
		def b = arr[i];  // b in [0,2] range, could be zero
		def c = a / b;   // potential unless i = 2
	}

}